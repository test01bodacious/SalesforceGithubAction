# This is a workflow to validate and deployment into E21/SB01

name: SFDX Validate and Deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This workflow run is made up of two jobs namely 'validate' and 'deploy' that will run sequentially
jobs:
  # This job will validate and deploy components with delta changes
  Validate-and-Deploy:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Starting SFDX CLI

      # Install wget for windows
      name: Github Action for wget
      # You may pin to the exact commit or the version.
      # uses: wei/wget@ca0a6b7f0fdd7ffbe9d4cec0b9696f2dc658d3c9
      uses: wei/wget@v1.1.1
      
      # Using SFDX CLI
      - name: Salesforce SFDX CLI Action
        # You may pin to the exact commit or the version.
        # uses: sfdx-actions/setup-sfdx@995ab395faa742df5acabb76fbdb6a5a7a5057d0
        uses: sfdx-actions/setup-sfdx@v1
        with:
          # Authorize a Salesforce org using an SFDX auth URL
          sfdx-auth-url: ${{ secrets.E21SB01_URL }}

      # Install node app for creating delta changes
      - name: Install Node App and Create Delta Changes
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git --no-pager diff --name-status e21/sb02 origin/main
          sgd --to e21/sb02 --from origin/main --repo . --output .
          cat package/package.xml

      # Convert Source into Metadata Format (because it's 'all or none')
      - name: Convert Metadata
        run: sfdx force:source:convert --manifest=package/package.xml --outputdir=convert

      # Validate components deployment and tests with delta changes
      - name: Validate Component Deployment
        run: sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunLocalTests --checkonly -w10

      # Deploy components with delta changes
      - name: Validate Component Deployment
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunLocalTests -w10
